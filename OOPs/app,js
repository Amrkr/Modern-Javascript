//  Prototype

//  Object.prototype

//Person Constructor
function Person(firstName, lastName, dob){
    this.firstName = firstName;
    this.lastName = lastName;
    this.birthday = new Date(dob);

    // this.calculateAge = function(){
    //     const diff = Date.now() - this.birthday.getTime();
    //     const ageDate = new Date(diff);
    //     return Math.abs(ageDate.getUTCFullYear() - 1970);
    // }
}

//We can write common behavior as prototype, instaed of writing directly into the class
//Calculate age
Person.prototype.calculateAge = function(){
    const diff = Date.now() - this.birthday.getTime();
    const ageDate = new Date(diff);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
}

//Get fullName
Person.prototype.getFullname = function(){
    return `${this.firstName} ${this.lastName}`;
}

//Gets Married
Person.prototype.getsMarried = function(newLastName){
    this.lastName = newLastName;
}

const john = new Person('John', 'Doe', '8-12-90');
const mary = new Person('Mary', 'Johnson', 'March 20 1978');


console.log(mary);
console.log(john.calculateAge());
console.log(john.getFullname());

mary.getsMarried('Smith');

console.log(mary.getFullname());

console.log(mary.hasOwnProperty('firstName'));
console.log(mary.hasOwnProperty('getFullname'));


//===================================================================
//                       Prototype Inheritence
//===================================================================
//  Person constructor

function Person(firstName, lastName){
    this.firstName = firstName;
    this.lastName = lastName;
}


//Greeting
Person.prototype.greeting = function(){
    return `Hello there ${this.firstName} ${this.lastName}`;
}

const person1 = new Person('John', 'Doe');

console.log(person1.greeting());

//  Customer constructor
function Customer(firstName, lastName, phone, membership){
    Person.call(this, firstName, lastName);

    this.phone = phone;
    this.membership = membership;
}

//  Inherit the Person prototype methods
Customer.prototype = Object.create(Person.prototype);

// Make customer.prototype return Customer()
Customer.prototype.constructor = Customer;

//Create a customer
const customer1 = new Customer('Tom', 'Smith', '555-555-5555', 
    'Standard');

console.log(customer1);

//  Customer greeting - override person greeting
Customer.prototype.greeting = function(){
    return `Hello there ${this.firstName} ${this.lastName} welcome to our company`;
}
console.log(customer1.greeting());


//==============================================================
//              Using Object.create
//================================================================

const personPrototype = {
    greeting: function(){
        return `Hello there ${this.firsrName} ${this.lastName}`;
    },
    getsMarried: function(newLastName){
        this.lastName = newLastName;
    }
}

//create object
const mary = Object.create(personPrototype);
mary.firsrName = 'Mary';
mary.lastName = 'Williams';
mary.age = 30;

mary.getsMarried('Thompson');

console.log(mary.greeting());

//other way to create object
const brad = Object.create(personPrototype, {
    firsrName: {value: 'Brad'},
    lastName: {value: 'Traversy'},
    age: {value: 36}
});

console.log(brad);
console.log(brad.greeting());



